import tkinter as tk

class Cuestionario:
    def __init__(self, master, preguntas):
        """
        Inicializa el cuestionario con una lista de preguntas y respuestas.
        
        Args:
            master (tk.Tk): Ventana principal de la aplicación.
            preguntas (list): Lista de tuplas donde cada tupla contiene una pregunta y su respuesta.
        """
        self.preguntas = preguntas
        self.respuestas = []
        self.current_question = 0

        # Configuración de la interfaz gráfica
        self.label = tk.Label(master, text=self.preguntas[self.current_question][0])
        self.label.pack()

        self.entry = tk.Entry(master)
        self.entry.pack()

        self.boton_siguiente = tk.Button(master, text="Siguiente", command=self.siguiente_pregunta)
        self.boton_siguiente.pack()

        self.boton_calificar = tk.Button(master, text="Calificar", command=self.calificar_respuestas)
        self.boton_calificar.pack()

    def siguiente_pregunta(self):
        """
        Guarda la respuesta actual, carga la siguiente pregunta y actualiza la interfaz.
        """
        respuesta = self.entry.get()
        self.respuestas.append(respuesta)
        self.entry.delete(0, tk.END)

        self.current_question += 1
        if self.current_question < len(self.preguntas):
            self.label.config(text=self.preguntas[self.current_question][0])
        else:
            self.boton_siguiente.config(state=tk.DISABLED)
            self.boton_calificar.config(state=tk.NORMAL)

    def calificar_respuestas(self):
        """
        Califica las respuestas del usuario y muestra el puntaje final.
        """
        puntaje = 0
        for i, (pregunta, respuesta_correcta) in enumerate(self.preguntas):
            if self.respuestas[i].lower() == respuesta_correcta.lower():
                puntaje += 1

        self.mostrar_resultados(puntaje)

    def mostrar_resultados(self, puntaje):
        """
        Muestra los resultados del cuestionario en la interfaz y en la consola.
        
        Args:
            puntaje (int): Puntaje obtenido por el usuario.
        """
        self.label.config(text=f"¡Cuestionario completado! Puntaje: {puntaje}/{len(self.preguntas)}")
        for i, (pregunta, _) in enumerate(self.preguntas):
            print(f"{pregunta}: {self.respuestas[i]}")

def cargar_preguntas_desde_archivo(nombre_archivo):
    """
    Carga las preguntas desde un archivo externo.
    
    El archivo debe tener el formato:
    Pregunta,Respuesta
    Pregunta,Respuesta
    ...
    
    Args:
        nombre_archivo (str): Nombre del archivo que contiene las preguntas.
        
    Returns:
        list: Lista de tuplas donde cada tupla contiene una pregunta y su respuesta.
    """
    with open(nombre_archivo, 'r') as archivo:
        lineas = archivo.readlines()
        preguntas = [linea.strip().split(',') for linea in lineas]
        return preguntas

if __name__ == "__main__":
    # Cargar las preguntas desde el archivo
    preguntas = cargar_preguntas_desde_archivo('preguntas.txt')

    # Inicializar la ventana de la aplicación
    root = tk.Tk()
    app = Cuestionario(root, preguntas)
    root.mainloop()
